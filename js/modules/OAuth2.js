/**********************************************************
 * Module imports
 *
 * OAuth2 HELPER FUNCTIONS
 *
 **********************************************************/
// Common modules
import CONFIGURATION					from "../data/config.json" with { type: "json" };
// Common functions
import * as COMMON						from "./common.functions.js";
// Common Classes and Exceptions ("Types")
import * as TYPES						from "./common.types.js";
// Common JWT functions
import * as JWT							from "./OAuth2/JWT.js";


/**********************************************************
 * Module Constants
 **********************************************************/
// Module SELF constants
const MODULE_NAME						= COMMON.getModuleName( import.meta.url );
const MODULE_VERSION					= "1.0.0";
const MODULE_PREFIX						= `[${MODULE_NAME}]: `;

// Logging constants
const DEBUG								= CONFIGURATION.global.debug;
const DEBUG_FOLDED						= CONFIGURATION.global.debug_folded;

// Inner constants
export const ERROR_CODE_01				= { "code":  1, "message": "No Auth Server Discovery" };
export const ERROR_CODE_02				= { "code":  2, "message": "No code to retrieve an access token" };
export const ERROR_CODE_03				= { "code":  3, "message": "No user authentication" };
export const ERROR_CODE_04				= { "code":  4, "message": "No access token" };
export const ERROR_CODE_05				= { "code":  5, "message": "No user DID Document received" };
export const ERROR_CODE_06				= { "code":  6, "message": "No user PDS Metadata received" };
export const ERROR_CODE_07				= { "code":  7, "message": "Invalid token" };
export const ERROR_CODE_10				= { "code": 10, "message": "Auth Servers mismatch!" };
export const ERROR_CODE_11				= { "code": 11, "message": "User did's mismatch!" };

// Inner constants
const LSKEYS							= CONFIGURATION.localStorageKeys;


/**********************************************************
 * Module Variables
 **********************************************************/
let GROUP_DEBUG							= DEBUG && DEBUG_FOLDED;


/**********************************************************
 * PRIVATE Functions
 **********************************************************/


/**********************************************************
 * PUBLIC Functions
 **********************************************************/
/*
 * Validates the token.
 *
 * + Check the expiration time
 * + Check that the token has been generated by the same ISS
 *
 */
export function validateAccessToken( accessToken, userAuthServerDiscovery, userAuthentication, userDidDocument, userPDSMetadata ) {
	const STEP_NAME						= "validateAccessToken";
	const PREFIX						= `[${MODULE_NAME}:${STEP_NAME}] `;
	if (GROUP_DEBUG) console.groupCollapsed( PREFIX );

	// Basic Checks
	// ------------------------------------------
	if ( COMMON.isNullOrEmpty( userAuthServerDiscovery ) ) {
		if (DEBUG) console.debug( PREFIX + "-- END" );
		if (GROUP_DEBUG) console.groupEnd();
		throw new TYPES.AccessTokenError( ERROR_CODE_01 );
	}
	// if (DEBUG) console.debug( PREFIX + "Received User Authentication Server Discovery information:", COMMON.prettyJson( userAuthServerDiscovery ) );

	if ( COMMON.isNullOrEmpty( userAuthentication ) ) {
		if (DEBUG) console.debug( PREFIX + "-- END" );
		if (GROUP_DEBUG) console.groupEnd();
		throw new TYPES.AccessTokenError( ERROR_CODE_03 );
	}
	// if (DEBUG) console.debug( PREFIX + "Received User Access Authentication:", COMMON.prettyJson( userAuthentication ) );

	if ( COMMON.isNullOrEmpty( accessToken ) ) {
		if (DEBUG) console.debug( PREFIX + "-- END" );
		if (GROUP_DEBUG) console.groupEnd();
		throw new TYPES.AccessTokenError( ERROR_CODE_04 );
	}
	// if (DEBUG) console.debug( PREFIX + "Received User Access Token:", JWT.jwtToPrettyJSON( accessToken ) );

	if ( COMMON.isNullOrEmpty( userDidDocument ) ) {
		if (DEBUG) console.debug( PREFIX + "-- END" );
		if (GROUP_DEBUG) console.groupEnd();
		throw new TYPES.AccessTokenError( ERROR_CODE_05 );
	}
	// if (DEBUG) console.debug( PREFIX + "Received User DID Document:", COMMON.prettyJson( userDidDocument ) );

	if ( COMMON.isNullOrEmpty( userPDSMetadata ) ) {
		if (DEBUG) console.debug( PREFIX + "-- END" );
		if (GROUP_DEBUG) console.groupEnd();
		throw new TYPES.AccessTokenError( ERROR_CODE_06 );
	}
	// if (DEBUG) console.debug( PREFIX + "Received User PDS Metadata:", COMMON.prettyJson( userPDSMetadata ) );


	// Other Checks
	// ------------------------------------------

	// Let's retrieve the runtime data
	let dataInLocalStorage				= JSON.parse( localStorage.getItem(LSKEYS.BSKYDATA) );

	// Let's retrieve the payload
	if (DEBUG) console.debug( PREFIX + "Let's analize the access token..." );
	let jwt								= JWT.getJWTAsSemiJSON( accessToken );
	let header							= JSON.parse( jwt.header );
	let payload							= JSON.parse( jwt.payload );
	// if (DEBUG) console.debug( PREFIX + "+ header:", COMMON.prettyJson( header ) );
	// if (DEBUG) console.debug( PREFIX + "+ payload:", COMMON.prettyJson( payload ) );

	// Let's see the ISS
	if ( !COMMON.areEquals( payload.iss, userPDSMetadata.authorization_servers[0] ) ) {
		if (DEBUG) console.debug( PREFIX + "-- END" );
		if (GROUP_DEBUG) console.groupEnd();
		throw new TYPES.AccessTokenError( ERROR_CODE_10 );
	}

	// Let's see the DID
	if ( !COMMON.areEquals(payload.sub,dataInLocalStorage.userDid) ) {
		if (DEBUG) console.debug( PREFIX + "-- END" );
		if (GROUP_DEBUG) console.groupEnd();
		throw new TYPES.AccessTokenError( ERROR_CODE_11 );
	}

	// Let's see the dates
	if (DEBUG) console.debug( PREFIX + "Let's analize the dates..." );
	const currentTime				= new Date();
	const tokenIssuedAt				= new Date(payload.iat * 1000);
	const tokenExpiresIn			= new Date(payload.exp * 1000);
	const msCurrentTime				= currentTime.getTime();
	const msTokenIssuedAt			= tokenIssuedAt.getTime();
	const msTokenExpiresIn			= tokenExpiresIn.getTime();
	if (DEBUG) console.debug( PREFIX + `+ [${msCurrentTime}] Current time....:`, currentTime );
	if (DEBUG) console.debug( PREFIX + `+ [${msTokenIssuedAt}] Token issued at.:`, tokenIssuedAt );
	if (DEBUG) console.debug( PREFIX + `+ [${msTokenExpiresIn}] Token expires in:`, tokenExpiresIn );

	console.warn( "TODO: Validate dates" );

	if (DEBUG) console.debug( PREFIX + "-- END" );
	if (GROUP_DEBUG) console.groupEnd();
	return true;
}



/*
	 *
	 * --------------------------------------------------------
	 * Sample payload for an access token:
	{
		"aud": "did:web:velvetfoot.us-east.host.bsky.network",
		"iat": 1738351395,
		"exp": 1738354995,
		"sub": "did:plc:tjc27aje4uwxtw5ab6wwm4km",
		"jti": "tok-cdfbe0a3e5ea716ab01805dcb7f769d1",
		"cnf": {
			"jkt": "XnZxHb9S-e7FcwffAbB0MfwTxOuHEmBfy5J2INdG4hI"
		},
		"client_id": "https://madrilenyer.neocities.org/bsky/oauth/client-metadata.json",
		"scope": "atproto transition:generic",
		"iss": "https://bsky.social"
	}
	 *
	 * --------------------------------------------------------
	 * Sample userAuthentication for an access token:
	 * --------------------------------------------------------
	{
		"access_token": "eyJ0eXAiOiJhdCtqd3QiLCJhbGciOiJFUzI1NksifQ.eyJhdWQiOiJkaWQ6d2ViOnZlbHZldGZvb3QudXMtZWFzdC5ob3N0LmJza3kubmV0d29yayIsImlhdCI6MTczODM1MTM5NSwiZXhwIjoxNzM4MzU0OTk1LCJzdWIiOiJkaWQ6cGxjOnRqYzI3YWplNHV3eHR3NWFiNnd3bTRrbSIsImp0aSI6InRvay1jZGZiZTBhM2U1ZWE3MTZhYjAxODA1ZGNiN2Y3NjlkMSIsImNuZiI6eyJqa3QiOiJYblp4SGI5Uy1lN0Zjd2ZmQWJCME1md1R4T3VIRW1CZnk1SjJJTmRHNGhJIn0sImNsaWVudF9pZCI6Imh0dHBzOi8vbWFkcmlsZW55ZXIubmVvY2l0aWVzLm9yZy9ic2t5L29hdXRoL2NsaWVudC1tZXRhZGF0YS5qc29uIiwic2NvcGUiOiJhdHByb3RvIHRyYW5zaXRpb246Z2VuZXJpYyIsImlzcyI6Imh0dHBzOi8vYnNreS5zb2NpYWwifQ.ihh5fo3tifPLtpaqUuSCHpdduGjoRUNSyKCzt-04fORc1c1ZyIQ4uTBVaK3Wb_vIAAeK-OBH0lcJSi3cfW7PSg",
		"token_type": "DPoP",
		"refresh_token": "ref-1308a47e1cf118824d4603a10d084c627e7890b8526177003a09f90c30310fc0",
		"scope": "atproto transition:generic",
		"expires_in": 3599,
		"sub": "did:plc:tjc27aje4uwxtw5ab6wwm4km"
	}
	 *
	 * --------------------------------------------------------
	 * Sample DID Document for an user
	 * --------------------------------------------------------
	{
		"@context": [
			"https://www.w3.org/ns/did/v1",
			"https://w3id.org/security/multikey/v1",
			"https://w3id.org/security/suites/secp256k1-2019/v1"
		],
		"id": "did:plc:tjc27aje4uwxtw5ab6wwm4km",
		"alsoKnownAs": [
			"at://madrilenyer.bsky.social"
		],
		"verificationMethod": [
			{
				"id": "did:plc:tjc27aje4uwxtw5ab6wwm4km#atproto",
				"type": "Multikey",
				"controller": "did:plc:tjc27aje4uwxtw5ab6wwm4km",
				"publicKeyMultibase": "zQ3shQzL5vznqAdHiD6wvKRfH5xEaDXWpP3JTGQYAfhQo6Dz5"
			}
		],
		"service": [
			{
				"id": "#atproto_pds",
				"type": "AtprotoPersonalDataServer",
				"serviceEndpoint": "https://velvetfoot.us-east.host.bsky.network"
			}
		]
	}
	 *
	 * --------------------------------------------------------
	 * Sample PDS Metadata for an user
	 * --------------------------------------------------------
	{
		"resource": "https://velvetfoot.us-east.host.bsky.network",
		"authorization_servers": [
			"https://bsky.social"
		],
		"scopes_supported": [],
		"bearer_methods_supported": [
			"header"
		],
		"resource_documentation": "https://atproto.com"
	}
	 *
	 * --------------------------------------------------------
	 * Sample BSKYDATA for an user
	 * --------------------------------------------------------
	{
		"userHandle": "madrilenyer.bsky.social",
		"userDid": "did:plc:tjc27aje4uwxtw5ab6wwm4km",
		"userDidDocument": {
			"@context": [
				"https://www.w3.org/ns/did/v1",
				"https://w3id.org/security/multikey/v1",
				"https://w3id.org/security/suites/secp256k1-2019/v1"
			],
			"id": "did:plc:tjc27aje4uwxtw5ab6wwm4km",
			"alsoKnownAs": [
				"at://madrilenyer.bsky.social"
			],
			"verificationMethod": [
				{
					"id": "did:plc:tjc27aje4uwxtw5ab6wwm4km#atproto",
					"type": "Multikey",
					"controller": "did:plc:tjc27aje4uwxtw5ab6wwm4km",
					"publicKeyMultibase": "zQ3shQzL5vznqAdHiD6wvKRfH5xEaDXWpP3JTGQYAfhQo6Dz5"
				}
			],
			"service": [
				{
					"id": "#atproto_pds",
					"type": "AtprotoPersonalDataServer",
					"serviceEndpoint": "https://velvetfoot.us-east.host.bsky.network"
				}
			]
		},
		"userPDSURL": "https://velvetfoot.us-east.host.bsky.network",
		"userPDSMetadata": {
			"resource": "https://velvetfoot.us-east.host.bsky.network",
			"authorization_servers": [
				"https://bsky.social"
			],
			"scopes_supported": [],
			"bearer_methods_supported": [
				"header"
			],
			"resource_documentation": "https://atproto.com"
		},
		"userAuthServerURL": "https://bsky.social",
		"userAuthServerDiscovery": {
			"issuer": "https://bsky.social",
			"scopes_supported": [
				"atproto",
				"transition:generic",
				"transition:chat.bsky"
			],
			"subject_types_supported": [
				"public"
			],
			"response_types_supported": [
				"code"
			],
			"response_modes_supported": [
				"query",
				"fragment",
				"form_post"
			],
			"grant_types_supported": [
				"authorization_code",
				"refresh_token"
			],
			"code_challenge_methods_supported": [
				"S256"
			],
			"ui_locales_supported": [
				"en-US"
			],
			"display_values_supported": [
				"page",
				"popup",
				"touch"
			],
			"authorization_response_iss_parameter_supported": true,
			"request_object_signing_alg_values_supported": [
				"RS256",
				"RS384",
				"RS512",
				"PS256",
				"PS384",
				"PS512",
				"ES256",
				"ES256K",
				"ES384",
				"ES512",
				"none"
			],
			"request_object_encryption_alg_values_supported": [],
			"request_object_encryption_enc_values_supported": [],
			"request_parameter_supported": true,
			"request_uri_parameter_supported": true,
			"require_request_uri_registration": true,
			"jwks_uri": "https://bsky.social/oauth/jwks",
			"authorization_endpoint": "https://bsky.social/oauth/authorize",
			"token_endpoint": "https://bsky.social/oauth/token",
			"token_endpoint_auth_methods_supported": [
				"none",
				"private_key_jwt"
			],
			"token_endpoint_auth_signing_alg_values_supported": [
				"RS256",
				"RS384",
				"RS512",
				"PS256",
				"PS384",
				"PS512",
				"ES256",
				"ES256K",
				"ES384",
				"ES512"
			],
			"revocation_endpoint": "https://bsky.social/oauth/revoke",
			"introspection_endpoint": "https://bsky.social/oauth/introspect",
			"pushed_authorization_request_endpoint": "https://bsky.social/oauth/par",
			"require_pushed_authorization_requests": true,
			"dpop_signing_alg_values_supported": [
				"RS256",
				"RS384",
				"RS512",
				"PS256",
				"PS384",
				"PS512",
				"ES256",
				"ES256K",
				"ES384",
				"ES512"
			],
			"client_id_metadata_document_supported": true
		},
		"userAuthorizationEndPoint": "https://bsky.social/oauth/authorize",
		"userTokenEndPoint": "https://bsky.social/oauth/token",
		"userPAREndPoint": "https://bsky.social/oauth/par",
		"userRevocationEndPoint": "https://bsky.social/oauth/revoke",
		"userAuthServerRequestURI": "urn:ietf:params:oauth:request_uri:req-bfdfb0a01d59015636a221733dbfecd4",
		"dpopNonce": "X-87xikxWXEEJwJsdY9OeY1uPz_5QpyYiBSwDDUhMLY",
		"dpopNonceUsed": "X-87xikxWXEEJwJsdY9OeY1uPz_5QpyYiBSwDDUhMLY",
		"dpopNonceReceived": "X-87xikxWXEEJwJsdY9OeY1uPz_5QpyYiBSwDDUhMLY",
		"wwwAuthenticate": null,
		"state": "4ef3e89d-1322-448e-ba1e-1e7be0c139e9",
		"codeVerifier": "7ef3c4fca4b7da2eaba6441005e3e6c6e7684de23d4a263f8e7ae687",
		"codeChallenge": "DyqUfH2x8f9brV7TwtUpSVkFIP-ap7yA7RqU-jJGE-Y",
		"callbackData": {
			"iss": "https://bsky.social",
			"state": "4ef3e89d-1322-448e-ba1e-1e7be0c139e9",
			"code": "cod-ee23b1c5eec0cea3c376e2d13b139acc2af7928bd30daafd20f3f5b89a337985",
			"dpopNonce": null
		},
		"userAuthentication": {
			"access_token": "eyJ0eXAiOiJhdCtqd3QiLCJhbGciOiJFUzI1NksifQ.eyJhdWQiOiJkaWQ6d2ViOnZlbHZldGZvb3QudXMtZWFzdC5ob3N0LmJza3kubmV0d29yayIsImlhdCI6MTczODM1MTM5NSwiZXhwIjoxNzM4MzU0OTk1LCJzdWIiOiJkaWQ6cGxjOnRqYzI3YWplNHV3eHR3NWFiNnd3bTRrbSIsImp0aSI6InRvay1jZGZiZTBhM2U1ZWE3MTZhYjAxODA1ZGNiN2Y3NjlkMSIsImNuZiI6eyJqa3QiOiJYblp4SGI5Uy1lN0Zjd2ZmQWJCME1md1R4T3VIRW1CZnk1SjJJTmRHNGhJIn0sImNsaWVudF9pZCI6Imh0dHBzOi8vbWFkcmlsZW55ZXIubmVvY2l0aWVzLm9yZy9ic2t5L29hdXRoL2NsaWVudC1tZXRhZGF0YS5qc29uIiwic2NvcGUiOiJhdHByb3RvIHRyYW5zaXRpb246Z2VuZXJpYyIsImlzcyI6Imh0dHBzOi8vYnNreS5zb2NpYWwifQ.ihh5fo3tifPLtpaqUuSCHpdduGjoRUNSyKCzt-04fORc1c1ZyIQ4uTBVaK3Wb_vIAAeK-OBH0lcJSi3cfW7PSg",
			"token_type": "DPoP",
			"refresh_token": "ref-1308a47e1cf118824d4603a10d084c627e7890b8526177003a09f90c30310fc0",
			"scope": "atproto transition:generic",
			"expires_in": 3599,
			"sub": "did:plc:tjc27aje4uwxtw5ab6wwm4km"
		},
		"userAccessToken": "eyJ0eXAiOiJhdCtqd3QiLCJhbGciOiJFUzI1NksifQ.eyJhdWQiOiJkaWQ6d2ViOnZlbHZldGZvb3QudXMtZWFzdC5ob3N0LmJza3kubmV0d29yayIsImlhdCI6MTczODM1MTM5NSwiZXhwIjoxNzM4MzU0OTk1LCJzdWIiOiJkaWQ6cGxjOnRqYzI3YWplNHV3eHR3NWFiNnd3bTRrbSIsImp0aSI6InRvay1jZGZiZTBhM2U1ZWE3MTZhYjAxODA1ZGNiN2Y3NjlkMSIsImNuZiI6eyJqa3QiOiJYblp4SGI5Uy1lN0Zjd2ZmQWJCME1md1R4T3VIRW1CZnk1SjJJTmRHNGhJIn0sImNsaWVudF9pZCI6Imh0dHBzOi8vbWFkcmlsZW55ZXIubmVvY2l0aWVzLm9yZy9ic2t5L29hdXRoL2NsaWVudC1tZXRhZGF0YS5qc29uIiwic2NvcGUiOiJhdHByb3RvIHRyYW5zaXRpb246Z2VuZXJpYyIsImlzcyI6Imh0dHBzOi8vYnNreS5zb2NpYWwifQ.ihh5fo3tifPLtpaqUuSCHpdduGjoRUNSyKCzt-04fORc1c1ZyIQ4uTBVaK3Wb_vIAAeK-OBH0lcJSi3cfW7PSg",
		"userRefreshToken": "ref-1308a47e1cf118824d4603a10d084c627e7890b8526177003a09f90c30310fc0",
		"accessTokenHash": "zGeIvSvAlc2xz0Y7b8-qCqfenrXePrfQU-ACys9Mc1w"
	}
	 *
 */
